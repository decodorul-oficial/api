/**
 * Exemplu practic de utilizare a sistemului de rate limiting
 * DemonstreazƒÉ cum func»õioneazƒÉ sistemul √Æn practicƒÉ
 */

import { createRateLimiterMiddleware, getRateLimitInfo, debugRateLimit } from '../src/middleware/rateLimiter.js';
import { getRequestLimit, hasUnlimitedRequests } from '../src/config/subscriptions.js';

// Mock pentru repository-ul de utilizatori
const mockUserRepository = {
  getRequestCountLast24Hours: async (userId) => {
    // SimuleazƒÉ diferite scenarii
    const scenarios = {
      'user-free-25': 25,    // Utilizator free cu 25 cereri
      'user-free-100': 100,  // Utilizator free la limita maximƒÉ
      'user-pro-1000': 1000, // Utilizator pro cu 1000 cereri
      'user-enterprise': 0   // Utilizator enterprise (nu conteazƒÉ)
    };
    return scenarios[userId] || 0;
  },
  
  logRequest: async (userId) => {
    console.log(`üìù Cerere logatƒÉ pentru utilizatorul: ${userId}`);
  },
  
  getProfileById: async (userId) => {
    const profiles = {
      'user-free-25': { subscription_tier: 'free' },
      'user-free-100': { subscription_tier: 'free' },
      'user-pro-1000': { subscription_tier: 'pro' },
      'user-enterprise': { subscription_tier: 'enterprise' }
    };
    return profiles[userId];
  }
};

// Func»õie pentru testarea rate limiting-ului
async function testRateLimiting() {
  console.log('üöÄ Testarea sistemului de rate limiting\n');

  // Test 1: Utilizator free sub limitƒÉ
  console.log('üìã Test 1: Utilizator free sub limitƒÉ (25/100 cereri)');
  try {
    const middleware = createRateLimiterMiddleware(mockUserRepository);
    const context1 = {
      user: {
        id: 'user-free-25',
        profile: { subscriptionTier: 'free' }
      }
    };
    
    await middleware({ contextValue: context1 });
    console.log('‚úÖ Cererea permisƒÉ pentru utilizatorul free sub limitƒÉ\n');
  } catch (error) {
    console.log('‚ùå Eroare nea»ôteptatƒÉ:', error.message, '\n');
  }

  // Test 2: Utilizator free la limitƒÉ
  console.log('üìã Test 2: Utilizator free la limitƒÉ (100/100 cereri)');
  try {
    const middleware = createRateLimiterMiddleware(mockUserRepository);
    const context2 = {
      user: {
        id: 'user-free-100',
        profile: { subscriptionTier: 'free' }
      }
    };
    
    await middleware({ contextValue: context2 });
    console.log('‚ùå Eroare: Cererea ar fi trebuit sƒÉ fie blocatƒÉ\n');
  } catch (error) {
    if (error.extensions?.code === 'RATE_LIMIT_EXCEEDED') {
      console.log('‚úÖ Cererea blocatƒÉ corect pentru utilizatorul free la limitƒÉ');
      console.log(`   Mesaj: ${error.message}\n`);
    } else {
      console.log('‚ùå Eroare nea»ôteptatƒÉ:', error.message, '\n');
    }
  }

  // Test 3: Utilizator pro sub limitƒÉ
  console.log('üìã Test 3: Utilizator pro sub limitƒÉ (1000/5000 cereri)');
  try {
    const middleware = createRateLimiterMiddleware(mockUserRepository);
    const context3 = {
      user: {
        id: 'user-pro-1000',
        profile: { subscriptionTier: 'pro' }
      }
    };
    
    await middleware({ contextValue: context3 });
    console.log('‚úÖ Cererea permisƒÉ pentru utilizatorul pro sub limitƒÉ\n');
  } catch (error) {
    console.log('‚ùå Eroare nea»ôteptatƒÉ:', error.message, '\n');
  }

  // Test 4: Utilizator enterprise (nelimitat)
  console.log('üìã Test 4: Utilizator enterprise (cereri nelimitate)');
  try {
    const middleware = createRateLimiterMiddleware(mockUserRepository);
    const context4 = {
      user: {
        id: 'user-enterprise',
        profile: { subscriptionTier: 'enterprise' }
      }
    };
    
    await middleware({ contextValue: context4 });
    console.log('‚úÖ Cererea permisƒÉ pentru utilizatorul enterprise (nelimitat)\n');
  } catch (error) {
    console.log('‚ùå Eroare nea»ôteptatƒÉ:', error.message, '\n');
  }

  // Test 5: Informa»õii despre rate limiting
  console.log('üìã Test 5: Informa»õii despre rate limiting');
  try {
    const context5 = {
      user: {
        id: 'user-free-25',
        profile: { subscriptionTier: 'free' }
      }
    };
    
    const rateLimitInfo = await getRateLimitInfo(context5, mockUserRepository);
    console.log('üìä Informa»õii rate limiting:');
    console.log(`   Tier: ${rateLimitInfo.tierName} (${rateLimitInfo.tier})`);
    console.log(`   Limita: ${rateLimitInfo.requestLimit} cereri/zi`);
    console.log(`   Cereri curente: ${rateLimitInfo.currentRequests}`);
    console.log(`   Cereri rƒÉmase: ${rateLimitInfo.remainingRequests}`);
    console.log(`   Nelimitat: ${rateLimitInfo.hasUnlimitedRequests}\n`);
  } catch (error) {
    console.log('‚ùå Eroare la ob»õinerea informa»õiilor:', error.message, '\n');
  }

  // Test 6: Debug rate limiting
  console.log('üìã Test 6: Debug rate limiting');
  try {
    const debugInfo = await debugRateLimit(mockUserRepository, 'user-free-25');
    console.log('üîç Debug info:');
    console.log(`   User ID: ${debugInfo.userId}`);
    console.log(`   Request Count: ${debugInfo.requestCount}`);
    console.log(`   Subscription Tier: ${debugInfo.subscriptionTier}`);
    console.log(`   Is Unlimited: ${debugInfo.isUnlimited}`);
    console.log(`   Timestamp: ${debugInfo.timestamp}\n`);
  } catch (error) {
    console.log('‚ùå Eroare la debug:', error.message, '\n');
  }

  // Test 7: Configura»õia planurilor
  console.log('üìã Test 7: Configura»õia planurilor de abonament');
  console.log('üìã Planuri disponibile:');
  
  const tiers = ['free', 'pro', 'enterprise'];
  tiers.forEach(tier => {
    const limit = getRequestLimit(tier);
    const unlimited = hasUnlimitedRequests(tier);
    console.log(`   ${tier.toUpperCase()}: ${unlimited ? '‚àû' : limit} cereri/zi`);
  });
  
  console.log('\n‚úÖ Testarea completƒÉ a sistemului de rate limiting finalizatƒÉ!');
}

// Func»õie pentru demonstrarea utilizƒÉrii √Æn practicƒÉ
async function demonstrateUsage() {
  console.log('\nüéØ Demonstrarea utilizƒÉrii √Æn practicƒÉ\n');

  // Exemplu 1: Verificarea rate limit-ului √Ænainte de o opera»õiune costisivƒÉ
  console.log('üìã Exemplu 1: Verificarea rate limit-ului √Ænainte de o opera»õiune costisivƒÉ');
  
  const expensiveOperation = async (userId, userRepository) => {
    // VerificƒÉ rate limit-ul √Ænainte de opera»õiune
    const context = {
      user: {
        id: userId,
        profile: { subscriptionTier: 'free' }
      }
    };
    
    try {
      const rateLimitInfo = await getRateLimitInfo(context, userRepository);
      
      if (rateLimitInfo.remainingRequests <= 0 && !rateLimitInfo.hasUnlimitedRequests) {
        throw new Error('Rate limit exceeded');
      }
      
      // SimuleazƒÉ o opera»õiune costisivƒÉ
      console.log(`   üöÄ Execut√¢nd opera»õiunea costisivƒÉ pentru ${userId}`);
      console.log(`   üìä Cereri rƒÉmase: ${rateLimitInfo.remainingRequests || '‚àû'}`);
      
      // LogheazƒÉ cererea
      await userRepository.logRequest(userId);
      
    } catch (error) {
      console.log(`   ‚ùå Opera»õiunea blocatƒÉ: ${error.message}`);
    }
  };

  // TesteazƒÉ cu diferi»õi utilizatori
  await expensiveOperation('user-free-25', mockUserRepository);
  await expensiveOperation('user-free-100', mockUserRepository);
  await expensiveOperation('user-enterprise', mockUserRepository);
}

// RuleazƒÉ exemplele
if (import.meta.url === `file://${process.argv[1]}`) {
  testRateLimiting()
    .then(() => demonstrateUsage())
    .catch(error => {
      console.error('‚ùå Eroare √Æn rularea exemplelor:', error);
      process.exit(1);
    });
}

export { testRateLimiting, demonstrateUsage };
