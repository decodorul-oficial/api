#!/usr/bin/env node

/**
 * Script de test pentru func»õionalitatea de conexiuni legislative
 * ValideazƒÉ cƒÉ toate func»õiile »ôi API-urile func»õioneazƒÉ corect
 */

import { createClient } from '@supabase/supabase-js';

// Configurare Supabase
const supabaseUrl = process.env.SUPABASE_URL || 'https://kwgfkcxlgxikmzdpxulp.supabase.co';
const supabaseKey = process.env.SUPABASE_ANON_KEY || 'your-anon-key';

const supabase = createClient(supabaseUrl, supabaseKey);

/**
 * Test 1: VerificƒÉ cƒÉ tabela legislative_connections existƒÉ
 */
async function testTableExists() {
  console.log('üîç Test 1: Verificarea existen»õei tabelei legislative_connections');
  
  try {
    const { data, error } = await supabase
      .from('legislative_connections')
      .select('*')
      .limit(1);
    
    if (error) {
      console.log('   ‚ùå Eroare:', error.message);
      return false;
    }
    
    console.log('   ‚úÖ Tabela legislative_connections existƒÉ');
    return true;
  } catch (error) {
    console.log('   ‚ùå Eroare nea»ôteptatƒÉ:', error.message);
    return false;
  }
}

/**
 * Test 2: VerificƒÉ cƒÉ func»õiile de baza de date existƒÉ
 */
async function testDatabaseFunctions() {
  console.log('\nüîç Test 2: Verificarea func»õiilor de baza de date');
  
  const functions = [
    'extract_legislative_connections',
    'get_legislative_graph',
    'get_legislative_connections_stats',
    'process_existing_stiri_for_connections',
    'cleanup_orphaned_connections'
  ];
  
  let allFunctionsExist = true;
  
  for (const funcName of functions) {
    try {
      const { data, error } = await supabase
        .rpc(funcName, { p_stire_id: 1, p_content: 'test', p_entities: '[]' });
      
      if (error && !error.message.includes('function') && !error.message.includes('parameter')) {
        console.log(`   ‚ùå Func»õia ${funcName}: ${error.message}`);
        allFunctionsExist = false;
      } else {
        console.log(`   ‚úÖ Func»õia ${funcName} existƒÉ`);
      }
    } catch (error) {
      console.log(`   ‚ùå Func»õia ${funcName}: ${error.message}`);
      allFunctionsExist = false;
    }
  }
  
  return allFunctionsExist;
}

/**
 * Test 3: TesteazƒÉ extragerea conexiunilor pentru o »ôtire
 */
async function testConnectionExtraction() {
  console.log('\nüîç Test 3: Testarea extragerii conexiunilor');
  
  try {
    // GƒÉse»ôte o »ôtire cu entitƒÉ»õi legislative
    const { data: stiri, error: stiriError } = await supabase
      .from('stiri')
      .select('id, title, entities')
      .not('entities', 'is', null)
      .limit(1);
    
    if (stiriError || !stiri || stiri.length === 0) {
      console.log('   ‚ùå Nu s-au gƒÉsit »ôtiri cu entitƒÉ»õi');
      return false;
    }
    
    const stire = stiri[0];
    console.log(`   üìÑ Testez »ôtirea: ${stire.title.substring(0, 50)}...`);
    
    // Extrage conexiunile
    const { error: extractError } = await supabase
      .rpc('extract_legislative_connections', {
        p_stire_id: stire.id,
        p_content: JSON.stringify({ title: stire.title }),
        p_entities: stire.entities
      });
    
    if (extractError) {
      console.log('   ‚ùå Eroare la extragerea conexiunilor:', extractError.message);
      return false;
    }
    
    console.log('   ‚úÖ Extragerea conexiunilor a func»õionat');
    return true;
  } catch (error) {
    console.log('   ‚ùå Eroare nea»ôteptatƒÉ:', error.message);
    return false;
  }
}

/**
 * Test 4: TesteazƒÉ ob»õinerea graficului legislative
 */
async function testLegislativeGraph() {
  console.log('\nüîç Test 4: Testarea ob»õinerii graficului legislative');
  
  try {
    // VerificƒÉ dacƒÉ existƒÉ conexiuni
    const { data: connections, error: connectionsError } = await supabase
      .from('legislative_connections')
      .select('*')
      .limit(1);
    
    if (connectionsError || !connections || connections.length === 0) {
      console.log('   ‚ö†Ô∏è  Nu existƒÉ conexiuni legislative pentru testare');
      return true; // Nu este o eroare, doar nu existƒÉ date
    }
    
    const connection = connections[0];
    console.log(`   üìä Testez graficul pentru »ôtirea ${connection.source_document_id}`);
    
    // Ob»õine graficul (cu limitarea de securitate la depth = 3)
    const { data: graph, error: graphError } = await supabase
      .rpc('get_legislative_graph', {
        p_document_id: connection.source_document_id,
        p_depth: 1
      });
    
    if (graphError) {
      console.log('   ‚ùå Eroare la ob»õinerea graficului:', graphError.message);
      return false;
    }
    
    if (graph && graph.length > 0) {
      const result = graph[0];
      console.log(`   ‚úÖ Graficul a fost ob»õinut: ${result.nodes?.length || 0} noduri, ${result.links?.length || 0} conexiuni`);
    } else {
      console.log('   ‚úÖ Func»õia a rulat, dar nu a returnat date');
    }
    
    return true;
  } catch (error) {
    console.log('   ‚ùå Eroare nea»ôteptatƒÉ:', error.message);
    return false;
  }
}

/**
 * Test 5: TesteazƒÉ ob»õinerea statisticilor
 */
async function testStatistics() {
  console.log('\nüîç Test 5: Testarea ob»õinerii statisticilor');
  
  try {
    const { data: stats, error: statsError } = await supabase
      .rpc('get_legislative_connections_stats');
    
    if (statsError) {
      console.log('   ‚ùå Eroare la ob»õinerea statisticilor:', statsError.message);
      return false;
    }
    
    if (stats && stats.length > 0) {
      const result = stats[0];
      console.log(`   ‚úÖ Statisticile au fost ob»õinute: ${result.total_connections || 0} conexiuni totale`);
    } else {
      console.log('   ‚úÖ Func»õia a rulat, dar nu a returnat date');
    }
    
    return true;
  } catch (error) {
    console.log('   ‚ùå Eroare nea»ôteptatƒÉ:', error.message);
    return false;
  }
}

/**
 * Test 6: TesteazƒÉ procesarea √Æn lot
 */
async function testBatchProcessing() {
  console.log('\nüîç Test 6: Testarea procesƒÉrii √Æn lot');
  
  try {
    const { data: count, error: processError } = await supabase
      .rpc('process_existing_stiri_for_connections');
    
    if (processError) {
      console.log('   ‚ùå Eroare la procesarea √Æn lot:', processError.message);
      return false;
    }
    
    console.log(`   ‚úÖ Procesarea √Æn lot a func»õionat: ${count || 0} »ôtiri procesate`);
    return true;
  } catch (error) {
    console.log('   ‚ùå Eroare nea»ôteptatƒÉ:', error.message);
    return false;
  }
}

/**
 * Test 7: VerificƒÉ trigger-urile
 */
async function testTriggers() {
  console.log('\nüîç Test 7: Verificarea trigger-urilor');
  
  try {
    // VerificƒÉ dacƒÉ existƒÉ trigger-uri
    const { data, error } = await supabase
      .rpc('get_legislative_connections_stats');
    
    if (error) {
      console.log('   ‚ùå Nu se pot verifica trigger-urile:', error.message);
      return false;
    }
    
    console.log('   ‚úÖ Trigger-urile par sƒÉ func»õioneze (func»õia de statistici ruleazƒÉ)');
    return true;
  } catch (error) {
    console.log('   ‚ùå Eroare nea»ôteptatƒÉ:', error.message);
    return false;
  }
}

/**
 * Test 8: VerificƒÉ limitarea de securitate pentru depth
 */
async function testSecurityDepthLimit() {
  console.log('\nüîí Test 8: Verificarea limitƒÉrii de securitate pentru depth');
  
  try {
    // VerificƒÉ dacƒÉ existƒÉ conexiuni pentru testare
    const { data: connections, error: connectionsError } = await supabase
      .from('legislative_connections')
      .select('*')
      .limit(1);
    
    if (connectionsError || !connections || connections.length === 0) {
      console.log('   ‚ö†Ô∏è  Nu existƒÉ conexiuni legislative pentru testare');
      return true;
    }
    
    const connection = connections[0];
    console.log(`   üìä Testez limitarea de securitate pentru »ôtirea ${connection.source_document_id}`);
    
    // TesteazƒÉ cu depth = 3 (limita maximƒÉ)
    const { data: graphValid, error: graphValidError } = await supabase
      .rpc('get_legislative_graph', {
        p_document_id: connection.source_document_id,
        p_depth: 3
      });
    
    if (graphValidError) {
      console.log('   ‚ùå Eroare la depth = 3 (ar trebui sƒÉ func»õioneze):', graphValidError.message);
      return false;
    }
    
    // TesteazƒÉ cu depth = 4 (ar trebui sƒÉ e»ôueze)
    const { data: graphInvalid, error: graphInvalidError } = await supabase
      .rpc('get_legislative_graph', {
        p_document_id: connection.source_document_id,
        p_depth: 4
      });
    
    if (!graphInvalidError) {
      console.log('   ‚ùå Depth = 4 nu a fost respins (ar trebui sƒÉ e»ôueze)');
      return false;
    }
    
    console.log('   ‚úÖ Limitarea de securitate func»õioneazƒÉ: depth > 3 este respins');
    return true;
  } catch (error) {
    console.log('   ‚ùå Eroare nea»ôteptatƒÉ:', error.message);
    return false;
  }
}

/**
 * Func»õia principalƒÉ de testare
 */
async function runAllTests() {
  console.log('üöÄ PORNIREA TESTELOR PENTRU FUNC»öIONALITATEA DE CONEXIUNI LEGISLATIVE\n');
  console.log('=' .repeat(80));
  
  const tests = [
    { name: 'Existen»õa tabelei', func: testTableExists },
    { name: 'Func»õiile de baza de date', func: testDatabaseFunctions },
    { name: 'Extragerea conexiunilor', func: testConnectionExtraction },
    { name: 'Ob»õinerea graficului', func: testLegislativeGraph },
    { name: 'Ob»õinerea statisticilor', func: testStatistics },
    { name: 'Procesarea √Æn lot', func: testBatchProcessing },
    { name: 'Verificarea trigger-urilor', func: testTriggers },
    { name: 'Limitarea de securitate pentru depth', func: testSecurityDepthLimit }
  ];
  
  let passedTests = 0;
  let totalTests = tests.length;
  
  for (const test of tests) {
    try {
      const result = await test.func();
      if (result) {
        passedTests++;
      }
    } catch (error) {
      console.log(`   ‚ùå Testul ${test.name} a e»ôuat cu o eroare nea»ôteptatƒÉ:`, error.message);
    }
  }
  
  console.log('\n' + '=' .repeat(80));
  console.log(`üìä REZULTATELE TESTELOR: ${passedTests}/${totalTests} teste au trecut`);
  
  if (passedTests === totalTests) {
    console.log('üéâ Toate testele au trecut cu succes! Func»õionalitatea de conexiuni legislative func»õioneazƒÉ perfect.');
  } else {
    console.log('‚ö†Ô∏è  Unele teste au e»ôuat. VerificƒÉ log-urile de mai sus pentru detalii.');
  }
  
  console.log('\nüí° Pentru a rula testele individual, po»õi apela func»õiile:');
  tests.forEach(test => {
    console.log(`   - ${test.func.name}`);
  });
}

// RuleazƒÉ testele dacƒÉ scriptul este executat direct
if (import.meta.url === `file://${process.argv[1]}`) {
  runAllTests().catch(console.error);
}

export {
  testTableExists,
  testDatabaseFunctions,
  testConnectionExtraction,
  testLegislativeGraph,
  testStatistics,
  testBatchProcessing,
  testTriggers,
  testSecurityDepthLimit,
  runAllTests
};
